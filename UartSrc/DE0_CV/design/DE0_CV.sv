
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_CV(
	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	inout 		          		CLOCK4_50,


	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,
	input 		          		RESET_N,

	//////////// LED //////////
	output		     [9:0]		LEDR,


	//////////// microSD Card //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DATA,

	//////////// SW //////////
	input 		     [9:0]		SW,


	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);


	
//=======================================================
//  REG/WIRE declarations
//=======================================================
	
	//system_setting
	assign clk 		= CLOCK_50;
	assign reset_n 	= RESET_N;
	
	//baud_setting
	logic [13:0] 	r_LPF_threshold;
	logic [1:0]		baud_setting;

	assign r_LPF_threshold 		= 14'd20;
	assign baud_setting			= 2'b10;
	
	//uart_setting
	logic 			rx			;	
	logic 			tx			;
	logic			tx_req		;
	logic 			rx_end_flag	;
	logic 			tx_end_flag ;
	logic [7:0] 	rx_data		;
	logic [7:0]		tx_data		;
	
	assign rx			= GPIO_0[2];
	assign GPIO_0[4]	= tx;	


//=======================================================
//  Structural coding
//=======================================================

	
	rs232 rs232_1(
	
		//input
		.clk					(clk					), 
		.rst               		(~reset_n               ),
		.rx						(rx						),
		.baud_setting			(baud_setting			),
		.r_LPF_threshold		(r_LPF_threshold		),
		.tx_data              	(tx_data               	),
		.tx_req              	(tx_req               	),
		
		//output
		.tx						(tx						),
		.rx_end_flag			(rx_end_flag			), 
		.rx_data				(rx_data				)
		//.tx_end_flag          (tx_end_flag   			)        	
	);
	
	cpu cpu1(
	
		//input
		.clk					(clk					), 
		.rst					(rst					),
		.rx_end_flag			(rx_end_flag			), 
		.rx_data				(rx_data				),
		
		//output
		.IR						(						),
		.W_q					(						), 
		.port_b_out				(						), 
		.tx_data				(tx_data				),
		.tx_req              	(tx_req               	)
	);
	
	Decoder4x16 tx_high(
		
		//input
		.data(tx_data[7:4]),
		//output
		.hex_out(HEX1)
	);
	
	Decoder4x16 tx_low(
		
		//input
		.data(tx_data[3:0]),
		//output
		.hex_out(HEX0)
	);
	
	Decoder4x16 rx_high(
		
		//input
		.data(rx_data[7:4]),
		//output
		.hex_out(HEX5)
	);
	
	Decoder4x16 rx_low(
		
		//input
		.data(rx_data[3:0]),
		//output
		.hex_out(HEX4)
	);

endmodule
	